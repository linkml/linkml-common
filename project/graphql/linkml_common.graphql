type Agent
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type AggregatePrediction implements OutcomeStatistics
  {
    type: String
    variablePredicted: Variable
    predictedValue: Any
    expectedValue: Any
    truePositiveCount: CountScalar
    falsePositiveCount: CountScalar
    trueNegativeCount: CountScalar
    falseNegativeCount: CountScalar
    recall: Float
    precision: Float
    f1Score: Float
    accuracy: Float
  }

type Any
  {
  }

type AutomatedAgent
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type BasicFoodType
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type Building
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
  }

type BuiltEnvironmentFeature
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type BuiltSystem
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type ClinicalCohort
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    definition: ClinicalCohortDefinition
  }

type ClinicalCohortDefinition
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type ClinicalCohortEnrollment
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    patient: Patient
    cohort: ClinicalCohort
  }

type CompositeFoodType
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type ComputationalPlannedProcess
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
    inputs: [Any]
    outputs: [Any]
    parts: [ComputationalPlannedProcess]
    immediatePrecedingSteps: [ComputationalPlannedProcess]
  }

type Concept implements Identified
  {
    type: String
    id: Uriorcurie!
    name: String
  }

interface CreationMetadata
  {
    title: String
    abstract: String
    rights: String
    creators: [Agent]
    contributors: [Agent]
    contacts: [Agent]
    keywords: [String]
  }

type CreativeWork implements CreationMetadata
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    title: String
    abstract: String
    rights: String
    creators: [Agent]
    contributors: [Agent]
    contacts: [Agent]
    keywords: [String]
  }

type CurrencyConcept
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type DataGenerationFromSample
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
    followsProcedure: InvestigativeProtocol
    partOf: Investigation
  }

type Dataset implements CreationMetadata
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
    collectedAsPartOf: [Investigation]
    title: String
    abstract: String
    rights: String
    creators: [Agent]
    contributors: [Agent]
    contacts: [Agent]
    keywords: [String]
  }

type DataStructure
  {
    type: String
  }

type Duration
  {
    type: String
    hasQuantityKind: QuantityKind
  }

type ElectricalGrid
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    plants: [PowerPlant]
  }

type EngineeringMaterialProcessing
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type EngineeringProcess
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: EngineeringSpecification
    partOf: EngineeringProcess
  }

type EngineeringSpecification
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type Entity implements Typed
  {
    type: String
  }

type EntitySet
  {
    type: String
    members: [Entity]
  }

type EnvironmentalSite
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    address: PostalAddress
    geolocation: GeoPointLocation
    boundingCoordinates: GeoBoxLocation
  }

type Equipment
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type Event implements Identified
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
  }

type ExecutionOfProcedure
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
  }

type ExtractiveIndustryEquipment
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type ExtractiveIndustryFacility
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    facilityType: ExtractiveIndustryFacilityType
    operator: Organization
    products: [ExtractiveIndustryProduct]
    productionCapacity: SimpleQuantity
    annualProduction: SimpleQuantity
    reserves: SimpleQuantity
  }

type ExtractiveIndustryProduct
  {
    type: String
    id: Uriorcurie!
    name: String
    productType: ExtractiveIndustryProductType
    grade: SimpleQuantity
    processingMethod: EngineeringSpecification
  }

type ExtractiveIndustryWaste
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type Facility
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
  }

type FinancialAccount
  {
    type: String
    accountNumber: String
    bank: Organization
    accountHolder: Person
  }

type FinancialOrganization
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    providesServices: [Service]
  }

type FinancialProduct
  {
    type: String
  }

type FoodIngredient
  {
    type: String
    hasQuantityKind: QuantityKind
  }

type FoodProcessing
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type FoodRecipe
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
    ingredients: [FoodIngredient]
    steps: [FoodProcessing]
  }

type FoodTypeConcept
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type FossilFuelPlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
    fuel: FossilFuelType
  }

type GeoBoxLocation
  {
    type: String
    westBoundingCoordinate: Decimal
    eastBoundingCoordinate: Decimal
    northBoundingCoordinate: Decimal
    southBoundingCoordinate: Decimal
  }

type GeoPointLocation
  {
    type: String
    latitude: Decimal
    longitude: Decimal
    altitude: Decimal
  }

type HealthcareConditionOccurrence
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    patient: Patient
    observedDuring: HealthcareEncounter
  }

type HealthcareEncounter
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    patient: Patient
    provider: HealthcareProvider
    classification: HealthcareEncounterClassification
  }

type HealthcareOrganization
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    providesServices: [Service]
  }

type HealthcareProvider
  {
    type: String
    isPerson: Person
    speciality: Concept
    careSite: HealthcareSite
  }

type HealthcareRole
  {
    type: String
    isPerson: Person
  }

type HealthcareSite
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    address: PostalAddress
    geolocation: GeoPointLocation
    boundingCoordinates: GeoBoxLocation
  }

type HydroelectricPlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
    dam: Landform
  }

interface Identified
  {
    id: Uriorcurie!
    name: String
  }

type InformationEntity implements Identified
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type Intangible
  {
    type: String
  }

type Investigation
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    objectives: String
    variables: [Variable]
  }

type InvestigativeProcess
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
    followsProcedure: InvestigativeProtocol
    partOf: Investigation
  }

type InvestigativeProtocol
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
    protocolsIoUrl: Uri
    classification: Concept
  }

type Landform
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    address: PostalAddress
    boundingCoordinates: GeoBoxLocation
    geolocation: GeoPointLocation
  }

type LifeEvent
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
  }

interface Location
  {
    type: String
  }

type MaterialCollection
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type MaterialProcessing
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type Measurement
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    quantityMeasured: Quantity
    variableMeasured: Variable
  }

type MiningFacility
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    facilityType: ExtractiveIndustryFacilityType
    operator: Organization
    products: [ExtractiveIndustryProduct]
    productionCapacity: SimpleQuantity
    annualProduction: SimpleQuantity
    reserves: SimpleQuantity
    miningMethod: MiningMethod
    depth: SimpleQuantity
    area: SimpleQuantity
  }

type MoneyQuantity
  {
    type: String
    hasQuantityKind: QuantityKind
    value: Float
    unit: CurrencyConcept
  }

type NamedThing implements Identified
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type NuclearPlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
  }

type Observation
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
  }

type Organization
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    providesServices: [Service]
  }

interface OutcomeStatistics
  {
    truePositiveCount: CountScalar
    falsePositiveCount: CountScalar
    trueNegativeCount: CountScalar
    falseNegativeCount: CountScalar
    recall: Float
    precision: Float
    f1Score: Float
    accuracy: Float
  }

type Patient
  {
    type: String
    isPerson: Person
  }

type Person
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    primaryEmail: String
    birthDate: Date
    ageInYears: Integer
    vitalStatus: PersonStatus
  }

type PhysicalDevice
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type Place
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    address: PostalAddress
    geolocation: GeoPointLocation
    boundingCoordinates: GeoBoxLocation
  }

type PlannedProcess
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type PlannedProcessConfiguration
  {
    type: String
  }

type PointLocation
  {
    type: String
  }

type PostalAddress
  {
    type: String
    streetAddress: String
    streetAddressAdditional: String
    city: String
    state: String
    postalCode: String
    country: String
  }

type PowerPlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
  }

type PowerPlantType
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type Prediction
  {
    type: String
    variablePredicted: Variable
    predictedValue: Any
    expectedValue: Any
  }

type PredictionSummaryStatistics implements OutcomeStatistics
  {
    type: String
    predictions: [Prediction]
    usesDataset: Dataset
    truePositiveCount: CountScalar
    falsePositiveCount: CountScalar
    trueNegativeCount: CountScalar
    falseNegativeCount: CountScalar
    recall: Float
    precision: Float
    f1Score: Float
    accuracy: Float
  }

type Procedure
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type Publication
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type Quantity
  {
    type: String
    hasQuantityKind: QuantityKind
  }

type QuantityKind
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type QuantityRange
  {
    type: String
    lowerBound: Quantity
    upperBound: Quantity
  }

type QuarryFacility
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    facilityType: ExtractiveIndustryFacilityType
    operator: Organization
    products: [ExtractiveIndustryProduct]
    productionCapacity: SimpleQuantity
    annualProduction: SimpleQuantity
    reserves: SimpleQuantity
  }

type Ratio
  {
    type: String
    hasQuantityKind: QuantityKind
    numerator: Quantity
    denominator: Quantity
  }

type RawMaterial
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

interface Relationship
  {
    type: String
  }

type RenewablePlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
  }

interface Role
  {
    type: String
  }

type SampleCollectionProcess
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
    followsProcedure: InvestigativeProtocol
    partOf: Investigation
    materialCollected: SampleMaterial
    collectedFrom: NamedThing
  }

type SampleMaterial
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
  }

type SampleProcessing
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    happensAt: TimePoint
    hasInterval: TemporalInterval
    hasDuration: Duration
    isOngoingAsOf: TimePoint
    id: Uriorcurie!
    name: String
    followsProcedure: Procedure
    usesPhysicalDevice: PhysicalDevice
    usesConfiguration: PlannedProcessConfiguration
  }

type Service
  {
    type: String
  }

type SimplePrediction
  {
    type: String
    variablePredicted: Variable
    predictedValue: Any
    outcome: OutcomeType
    expectedValue: String
  }

type SimpleQuantity
  {
    type: String
    hasQuantityKind: QuantityKind
    value: Float
    unit: UnitConcept
  }

type SolarPlant
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
  }

type Specification
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
  }

type StructuredValue
  {
    type: String
  }

type StudyDesign
  {
    type: String
    describes: Any
    id: Uriorcurie!
    name: String
    classification: Concept
  }

type TemporalInterval
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
  }

type TemporalRelationship
  {
    type: String
    predicate: RelativeTimeEnum
    relativeTo: Entity
  }

type TimePoint
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
    yearValue: Integer
    dateValue: Date
    timeValue: Time
    datetimeValue: Datetime
    markerEvent: Event
    description: String
  }

type TimePointOrTemporalInterval
  {
    type: String
    startsAt: TimePoint
    endsAt: TimePoint
  }

interface Typed
  {
    type: String
  }

type UnitConcept
  {
    type: String
    id: Uriorcurie!
    name: String
  }

type Variable
  {
    type: String
    allowedUnits: [UnitConcept]
  }

type WellFacility
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    facilityType: ExtractiveIndustryFacilityType
    operator: Organization
    products: [ExtractiveIndustryProduct]
    productionCapacity: SimpleQuantity
    annualProduction: SimpleQuantity
    reserves: SimpleQuantity
    wellType: WellType
    depth: SimpleQuantity
  }

type WindFarm
  {
    type: String
    classification: Concept
    ontologyTypes: [Concept]
    description: String
    id: Uriorcurie!
    name: String
    locatedAtPlace: Place
    plantType: PowerPlantType
    location: Place
    operator: Organization
    capacity: SimpleQuantity
    commissioningDate: Date
    decommissioningDate: Date
    capex: MoneyQuantity
    opex: MoneyQuantity
  }

